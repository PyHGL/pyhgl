
from pyhgl.logic import *
import sys

""" 
conditional assignment 
"""


@conf.timing Tconfig:
    timescale = '1ns'
    Clock = {'low':20, 'high':20, 'phase':0}
    Logic = dict( delay = 1 ) 
    Gate = dict( delay = 2 )



def print_cond():
    print(sys._getframe(1).f_locals['__hgl_condition__'])

@module TestModule:  
    x = Input(UInt(1))
    y = UInt(0)
    z = UInt(0)
    state = UInt('11') 
    # out = Reg(UInt('0000'))
    out = UInt('0000')
    out <== ~out
    when x:
        out <== UInt('11')
        when y: 
            out <== UInt('10')
        elsewhen z: 
            out <== UInt('01') 
        otherwise: 
            out <== ~out
    when z: 
        switch state:
            once 0,1: 
                out <== '1111'
            once 2: 
                out[3] <== 0 
            once ...:
                out[3:1] <== '101' 

    # switch s:=Enum('idle'):
    #     once 'idle':
    #         out <== '1100'
    #     once 'stage1':
    #         out <== '0011'



@initial Tester(DUT):
    yield 10
    DUT.x.setVal(1)
    DUT.z.setVal(1) 
    yield 200 
    DUT.y.setVal(0)
    DUT.z.setVal(0)    
    yield 100 
    DUT.z.setVal(1)  
    DUT.state.setVal(1)  
    yield 100 
    DUT.x.setVal(0)
    DUT.state.setVal(3)  

with Session(
    timing=Tconfig(), 
    verbose_conf=True, 
    verbose_hardware=True,
    verbose_sim = True,
    verbose_verilog = True,
) as sess:

    test = TestModule() 

    print(test.out._data.writer._driver.condtree)


    Tester(test) 
    sess.track(test.clock[0], test.out)
    sess.run(500) 

    print(sess.dumpVerilog())
    sess.dumpGraph().view()

    sess.dumpVCD()
    print(sess)

    UInt[2]('111')

    s = Enum('a','b','c')
    print(s)
    sel_t = Enum['a','b','c']
    print(sel_t('c')) 
