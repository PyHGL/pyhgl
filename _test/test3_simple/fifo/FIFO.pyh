from pyhgl.logic import *
from pyhgl.tester import tester, utils

import random
import time 

@conf Global:
    conf.timing = Bundle(
        timescale = '1ns',
        clk1 = {'low':20, 'high':20, 'phase':0},
        clk2 = {'low':40, 'high':40, 'phase':10},
    )


def binary2gray(x):
    return (x >> 1) ^ x


@module Async_FIFO(data_width: int = 16, addr_width: int = 3):

    io = Bundle(
        w_clk       = Input('0'),
        w_rst_n     = Input('0'),
        w_en        = Input('0'),
        w_data      = Input(UInt[data_width](0)),
        full        = Output('0'),

        r_clk       = Input('0'),
        r_rst_n     = Input('0'),
        r_en        = Input('0') ,
        r_data      = Output(UInt[data_width](0)),
        empty       = Output('0'),
    )

    RAM_t = UInt[data_width] * (1 << addr_width)
    w_domain = ClockDomain(clock=(io.w_clk, 1), reset=(io.w_rst_n, 0))
    r_domain = ClockDomain(clock=(io.r_clk, 1), reset=(io.r_rst_n, 0))

    # reg
    with w_domain:
        w_ptr = Reg(UInt[addr_width+1](0)) 
        w_ptr_gray = binary2gray(w_ptr)
        RAM = Reg(RAM_t(0)) 
    with r_domain:
        w_ptr_gray_syncr = RegNext(RegNext(w_ptr_gray)) 
        r_ptr = Reg(UInt[addr_width+1](0))  
        r_ptr_gray = binary2gray(r_ptr) 
        Reg(io.r_data)
    with w_domain:
        r_ptr_gray_syncw = RegNext(RegNext(r_ptr_gray)) 

    io.full <== Cat(r_ptr_gray_syncw[:-2], ~r_ptr_gray_syncw[-2:]) == w_ptr_gray 
    io.empty <== w_ptr_gray_syncr == r_ptr_gray 

    when io.w_en && !io.full:
        w_ptr <== w_ptr + 1 
        RAM[w_ptr[:-1]] <== io.w_data
    when io.r_en && !io.empty:
        r_ptr <== r_ptr + 1 
        io.r_data <== RAM[r_ptr[:-1]] 
    r_ptr_1 = r_ptr[:-1] 
    r_data_test = RAM[r_ptr_1]



#--------------------------------- test ----------------------------------------

DWIDTH = 8 
AWIDTH = 4 
N = 200

# random.seed(42)
# write_data = []
# read_data = []

# def write_fifo(dut):
#     clk = negedge(dut.io.w_clk) 
#     yield from clk
#     for _ in range(N):  
#         if random.randint(0,1) and getv(dut.io.full) == 0:
#             setv(dut.io.w_en, 1) 
#             v = setr(dut.io.w_data) 
#             write_data.append(v)
#         else:
#             setv(dut.io.w_en, 0)
#         yield from clk 

# def read_fifo(dut):
#     clk = negedge(dut.io.r_clk)
#     yield from clk 
#     for _ in range(N): 
#         if random.randint(0,1) and getv(dut.io.empty) == 0:
#             setv(dut.io.r_en, 1)
#             yield from clk 
#             read_data.append(getv(dut.io.r_data))
#         else:
#             setv(dut.io.r_en, 0) 
#             yield from clk


@task write_fifo(self, dut, data, N):
    for _ in range(N):
        if getv(dut.io.full) == 0:
            setv(dut.io.w_en, 1)
            data.append(setr(dut.io.w_data))
        else:
            setv(dut.io.w_en, 0)
        yield self.edge(dut.io.w_clk, 0)

@task read_fifo(self, dut, data, N):
    for _ in range(N):
        if getv(dut.io.empty) == 0:
            setv(dut.io.r_en, 1)
            yield self.edge(dut.io.r_clk, 0)
            data.append(getv(dut.io.r_data))
        else:
            setv(dut.io.r_en, 0)
            yield self.edge(dut.io.r_clk, 0) 

@task test_fifo(self, dut, N):
    yield 10
    setv(dut.io.r_rst_n, 1)
    setv(dut.io.w_rst_n, 1)
    write_data, read_data = [], []
    yield self.join(
        write_fifo(dut, write_data, N),
        read_fifo(dut, read_data, N),
    )
    for w, r in zip(write_data, read_data):
        self.AssertEq(w, r)

@tester test_FIFO(self):
    sess = Session(Global())
    sess.enter()

    dut = Async_FIFO(DWIDTH, AWIDTH)  
    dut.io.w_clk <== Clock(id='clk1')
    dut.io.r_clk <== Clock(id='clk2')

    sess.track(dut)
    sess.join(test_fifo(dut, N))
    # sess.task(write_fifo(dut), read_fifo(dut))

    # sess.step(100)
    # setv(dut.io.r_rst_n, 1)
    # setv(dut.io.w_rst_n, 1)
    # sess.step(N * 100) 

    # for i, o in zip(write_data, read_data):
    #     self.EQ += i, o


    # @blackbox testbench(builder):
    #     dut_name    = builder.get_name(dut)
    #     w_rst       = builder.get_name(dut.io.w_rst_n)
    #     r_rst       = builder.get_name(dut.io.r_rst_n)
    #     w_en        = builder.get_name(dut.io.w_en)
    #     r_en        = builder.get_name(dut.io.r_en)
    #     w_data      = builder.get_name(dut.io.w_data)

    #     builder.append('initial begin')
    #     builder.append(f'$dumpfile("FIFO_iverilog.vcd");')
    #     builder.append(f'$dumpvars(0, {dut_name});')
    #     builder.append(f'{w_rst}=0;{r_rst}=0;#100;')
    #     builder.append(f'{w_rst}=1;{r_rst}=1;{w_en}=1;{r_en}=1;')
    #     for v in write_data:
    #         builder.append(f'{w_data} = {v}; #100;') 
    #     builder.append('#200;')
    #     builder.append('$finish;')
    #     builder.append('end')

    sess.dumpVerilog('FIFO.sv', delay=True, top = True) 

    sess.dumpVCD('FIFO.vcd') 
    sess.dumpGraph('FIFO.gv')
    print(sess)
    # sess.test_iverilog()
    sess.exit()
