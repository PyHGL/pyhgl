
from pyhgl.logic import *
from pyhgl.tester import tester, utils

import time 
import sys 

@conf Global:
    w = 512
    @conf RippleCarry:
        w = conf.up.w
    @conf KoggeStone:
        w = conf.up.w

AdderIO = lambda w: Bundle(
    x   = UInt[w](0)    @ Input,
    y   = UInt[w](0)    @ Input,
    out = UInt[w+1](0)  @ Output, 
)

@module FA:
    a, b, cin = UInt(0), UInt(0), UInt(0)
    s = Xor(a, b, cin)
    cout = a & b | (a ^ b) & cin 

@module RippleCarry:
    io = AdderIO(conf.p.w) 
    fa = Array(FA() for _ in range(conf.p.w))
    fa[:, 'a']   <== io.x.split()
    fa[:, 'b']   <== io.y.split()
    fa[:, 'cin'] <== 0, *fa[:-1,'cout']
    io.out <== Cat(*fa[:,'s'], fa[-1,'cout']) 

@module KoggeStone:
    io = AdderIO(conf.p.w) 
    P_odd = io.x ^ io.y
    P = P_odd.split()
    G = (io.x & io.y).split()
    dist = 1 
    while dist < conf.p.w:
        for i in reversed(range(dist,conf.p.w)): 
            G[i] = G[i] | (P[i] & G[i-dist])
            if i >= dist * 2:
                P[i] = P[i] & P[i-dist]
        dist *= 2 
    io.out <== Cat(0, *G) ^ P_odd


@task data_gen(self, dut, test_data):
    for x, y in test_data:
        setv(dut.io.x, x)
        setv(dut.io.y, y)
        yield self.clock_n() 
        self.AssertEq(getv(dut.io.out), x+y)

@tester test_adder(self): 
    with Session(conf=Global(), verbose_sim=False) as sess: 

        # dut = KoggeStone()
        dut = RippleCarry()
        # sess.track(dut.io)  

        test_data = [(Logic.rand(conf.p.w), Logic.rand(conf.p.w)) for _ in range(1000)]
        t = time.time()
        sess.join(data_gen(dut, test_data))
        print('pyhgl cost: ', time.time()-t)
        sess.dumpVCD('Adder.vcd') 
        sess.dumpGraph('Adder.gv')
        print(sess)

        @blackbox testbench(builder):
            x = builder.get_name(dut.io.x)
            y = builder.get_name(dut.io.y) 

            builder.append('initial begin\n$dumpfile("Adder_iverilog.vcd");$dumpvars(0);') 
            for test_x, test_y in test_data:
                builder.append(f'{x}={test_x};{y}={test_y};#200;')
            builder.append('$finish;\nend')

        sess.dumpVerilog('Adder.sv', delay=True, top = True) 
        sess.test_iverilog()


