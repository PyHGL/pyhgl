from pyhgl.logic import * 
from pyhgl.tester import tester, utils

import random
import time 
import itertools


@module Divider(w: int):
    io = Bundle(
        x = Input(UInt[w](0)),   # dividend 
        y = Input(UInt[w](0)),   # divisor
        valid = Input(UInt(0)),

        q = Output(UInt[w](0)),  # quotient
        r = Output(UInt[w](0)),  # remainder 
        ready = Output(UInt(0)),
    )

    # registers
    A = Reg(UInt[w*2](0))       # dividend 
    B = Reg(UInt[w](0))         # divisor
    C = Reg(UInt[w](0))         # quotient 
    io.q <== C 
    io.r <== A[w:]

    counter = Reg(UInt(w-1))  
    io.ready <== (counter == w-1)

    # comb
    A_curr = Mux(io.ready, io.x, A)
    B_curr = Mux(io.ready, io.y, B)
    C_curr = Mux(io.ready, 0, C)

    A_curr_shift = A_curr << 1 
    B_curr_shift = Cat(UInt[w](0), B_curr)
    A_greater_B = A_curr_shift >= B_curr_shift 
    A_next = Mux(A_greater_B, A_curr_shift - B_curr_shift, A_curr_shift) 
    C_next = Mux(A_greater_B, Cat('1', C_curr[:-1]), Cat('0', C_curr[:-1]))

    # control
    when io.ready:      # idle
        when io.valid:
            A <== A_next 
            B <== B_curr 
            C <== C_next 
            counter <== 0 
    otherwise:          # exec 
        A <== A_next 
        C <== C_next 
        counter <== counter + 1

    clk = conf.clock[0]
    # with AssertCtrl():
    #     Assert(Rise(clk) >>> clk)



@conf Global(clock_period):
    conf.timing = Bundle(
        timescale   = '1ns',
        Clock       = {'low':clock_period, 'high':clock_period, 'phase':0},
        Logic       = {'delay': 1},
        Gate        = {'delay': 1},
    )


#--------------------------------- test ----------------------------------------

@task divider_tests(self, dut, test_data):
    yield self.reset()
    for x,y in test_data: 
        yield self.clock_n()
        setv(dut.io.valid, 1)
        setv(dut.io.x,x)
        setv(dut.io.y,y)
        yield self.clock_n()
        setv(dut.io.valid, 0)
        yield self.until(dut.io.ready, 1)
        self.AssertEq(getv(dut.io.q), x // y)
        self.AssertEq(getv(dut.io.r), x % y)

@tester test_divider(self):

    W, N = 256, 30
    clock_period = 20
    mask = (1 << W) - 1 

    sess = Session(Global(clock_period))
    sess.enter()

    dut = Divider(W)
    # sess.track(dut.clock[0], dut)

    test_data = [(Logic.rand(W), Logic.rand(W)) for _ in range(N)]
    t = time.time()
    sess.join(divider_tests(dut, test_data))
    print('pyhgl simulation cost:', time.time()-t)
    sess.dumpVCD('Divider.vcd') 
    print(sess)

    @blackbox testbench(builder):
        dut_name = builder.get_name(dut)
        reset = builder.get_name(dut.reset[0])
        x = builder.get_name(dut.io.x)
        y = builder.get_name(dut.io.y)
        q = builder.get_name(dut.io.q)
        r = builder.get_name(dut.io.r)
        valid = builder.get_name(dut.io.valid)

        builder.append('initial begin')
        builder.append(f'$dumpfile("Divider_iverilog.vcd");')
        builder.append(f'$dumpvars(0, {dut_name});') 
        builder.append(f'{reset} = 1; #{clock_period*2}; {reset} = 0;')
        for x1, y1 in test_data:
            builder.append(f'{x} = {x1}; {y} = {y1}; {valid} = 1; #{clock_period*2};')
            builder.append(f'{valid} = 0; # {clock_period*2*W};')
        builder.append('$finish;')
        builder.append('end')


    sess.dumpVerilog('Divider.sv', delay=False, top = True) 
    # sess.dumpGraph('Divider.gv') 
    sess.test_iverilog()
    sess.exit()
