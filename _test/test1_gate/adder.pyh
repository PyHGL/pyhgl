
from pyhgl.logic import *
from pyhgl.tester import tester, utils

import time 


@conf Global:
    @conf RippleCarry:
        w = 6
    @conf KoggeStone:
        w = 5

AdderIO = lambda w: Bundle(
    x   = UInt[w](0)    @ Input,
    y   = UInt[w](0)    @ Input,
    out = UInt[w+1](0)  @ Output, 
)

@module FA:
    a, b, cin = UInt(0), UInt(0), UInt(0)
    s = a ^ b ^ cin 
    cout = a & b | (a ^ b) & cin 

@module RippleCarry:
    io = AdderIO(conf.p.w) @ IO
    fa = Array(FA() for _ in range(conf.p.w))
    fa[:, 'a']   <== io.x.split()
    fa[:, 'b']   <== io.y.split()
    fa[0, 'cin'] <== 0 
    fa[1:,'cin'] <== fa[:-1,'cout']
    io.out <== Cat(*fa[:,'s'], fa[-1,'cout']) 

@module KoggeStone:
    io = AdderIO(conf.p.w) @ IO
    P_odd = io.x ^ io.y
    P = P_odd.split()
    G = (io.x & io.y).split()
    dist = 1 
    while dist < conf.p.w:
        for i in reversed(range(dist,conf.p.w)): 
            G[i] = G[i] | (P[i] & G[i-dist])
            if i >= dist * 2:
                P[i] = P[i] & P[i-dist]
        dist *= 2 
    io.out <== Cat(0, *G) ^ P_odd


@tester test_adder: 
    with Session(conf=Global(), verbose_sim=False) as sess:

        xxx = UInt('xx1100')
        print(xxx)

        adder1 = RippleCarry()
        adder2 = KoggeStone()
        sess.track(adder1.io, adder2.io) 
        for i in range(100):
            x1, y1 = setr(adder1.io[['x','y']])
            x2, y2 = setr(adder2.io[['x','y']]) 
            sess.run(100)
            tester.EQ += getv(adder1.io.out), x1+y1 
            tester.EQ += getv(adder2.io.out), x2+y2 
        sess.emitVCD('Adder.vcd') 
        sess.emitGraph('Adder.gv')
        print(sess)

        dut = adder1
        @inline_verilog Verilog(self):
            dut_name = self.get_name(dut)
            x = self.get_name(dut.io.x)
            y = self.get_name(dut.io.y)
            out = self.get_name(dut.io.out)

            self.append('initial begin')
            path = utils.relative_path("Adder_iverilog.vcd")
            self.append(f'$dumpfile("{path}");')
            self.append(f'$dumpvars(0, {x}, {y}, {out});')
            self.append(f'{x} = {12}; {y} = {4}; #200;')
            self.append('$finish;')
            self.append('end')

        sess.emitVerilog('Adder.sv', delay=True, top = True)


