from pyhgl.logic import * 

RISCV = Bundle(

    inst_t = Struct( 
        inst    = UInt[32]  @0,
        opcode  = UInt[7]   @0,
        rs1     = UInt[5]   @15,
        rs2     = UInt[5]   @20,
        rd      = UInt[5]   @7,
        funct3  = UInt[3]   @12, 
        funct7  = UInt[7]   @25,
        csr     = UInt[12]  @20,
    ),
    Instructions = Bundle(
        BEQ                = BitPat("b?????????????????000?????1100011"),
        BNE                = BitPat("b?????????????????001?????1100011"),
        BLT                = BitPat("b?????????????????100?????1100011"),
        BGE                = BitPat("b?????????????????101?????1100011"),
        BLTU               = BitPat("b?????????????????110?????1100011"),
        BGEU               = BitPat("b?????????????????111?????1100011"),
        JALR               = BitPat("b?????????????????000?????1100111"),
        JAL                = BitPat("b?????????????????????????1101111"),
        LUI                = BitPat("b?????????????????????????0110111"),
        AUIPC              = BitPat("b?????????????????????????0010111"),
        ADDI               = BitPat("b?????????????????000?????0010011"),
        SLLI               = BitPat("b000000???????????001?????0010011"),
        SLTI               = BitPat("b?????????????????010?????0010011"),
        SLTIU              = BitPat("b?????????????????011?????0010011"),
        XORI               = BitPat("b?????????????????100?????0010011"),
        SRLI               = BitPat("b000000???????????101?????0010011"),
        SRAI               = BitPat("b010000???????????101?????0010011"),
        ORI                = BitPat("b?????????????????110?????0010011"),
        ANDI               = BitPat("b?????????????????111?????0010011"),
        ADD                = BitPat("b0000000??????????000?????0110011"),
        SUB                = BitPat("b0100000??????????000?????0110011"),
        SLL                = BitPat("b0000000??????????001?????0110011"),
        SLT                = BitPat("b0000000??????????010?????0110011"),
        SLTU               = BitPat("b0000000??????????011?????0110011"),
        XOR                = BitPat("b0000000??????????100?????0110011"),
        SRL                = BitPat("b0000000??????????101?????0110011"),
        SRA                = BitPat("b0100000??????????101?????0110011"),
        OR                 = BitPat("b0000000??????????110?????0110011"),
        AND                = BitPat("b0000000??????????111?????0110011"),
        ADDIW              = BitPat("b?????????????????000?????0011011"),
        SLLIW              = BitPat("b0000000??????????001?????0011011"),
        SRLIW              = BitPat("b0000000??????????101?????0011011"),
        SRAIW              = BitPat("b0100000??????????101?????0011011"),
        ADDW               = BitPat("b0000000??????????000?????0111011"),
        SUBW               = BitPat("b0100000??????????000?????0111011"),
        SLLW               = BitPat("b0000000??????????001?????0111011"),
        SRLW               = BitPat("b0000000??????????101?????0111011"),
        SRAW               = BitPat("b0100000??????????101?????0111011"),
        LB                 = BitPat("b?????????????????000?????0000011"),
        LH                 = BitPat("b?????????????????001?????0000011"),
        LW                 = BitPat("b?????????????????010?????0000011"),
        LD                 = BitPat("b?????????????????011?????0000011"),
        LBU                = BitPat("b?????????????????100?????0000011"),
        LHU                = BitPat("b?????????????????101?????0000011"),
        LWU                = BitPat("b?????????????????110?????0000011"),
        SB                 = BitPat("b?????????????????000?????0100011"),
        SH                 = BitPat("b?????????????????001?????0100011"),
        SW                 = BitPat("b?????????????????010?????0100011"),
        SD                 = BitPat("b?????????????????011?????0100011"),
        FENCE              = BitPat("b?????????????????000?????0001111"),
        FENCE_I            = BitPat("b?????????????????001?????0001111"),
        MUL                = BitPat("b0000001??????????000?????0110011"),
        MULH               = BitPat("b0000001??????????001?????0110011"),
        MULHSU             = BitPat("b0000001??????????010?????0110011"),
        MULHU              = BitPat("b0000001??????????011?????0110011"),
        DIV                = BitPat("b0000001??????????100?????0110011"),
        DIVU               = BitPat("b0000001??????????101?????0110011"),
        REM                = BitPat("b0000001??????????110?????0110011"),
        REMU               = BitPat("b0000001??????????111?????0110011"),
        MULW               = BitPat("b0000001??????????000?????0111011"),
        DIVW               = BitPat("b0000001??????????100?????0111011"),
        DIVUW              = BitPat("b0000001??????????101?????0111011"),
        REMW               = BitPat("b0000001??????????110?????0111011"),
        REMUW              = BitPat("b0000001??????????111?????0111011"),
        LR_W               = BitPat("b00010??00000?????010?????0101111"),
        SC_W               = BitPat("b00011????????????010?????0101111"),
        LR_D               = BitPat("b00010??00000?????011?????0101111"),
        SC_D               = BitPat("b00011????????????011?????0101111"),
        ECALL              = BitPat("b00000000000000000000000001110011"),
        EBREAK             = BitPat("b00000000000100000000000001110011"),
        URET               = BitPat("b00000000001000000000000001110011"),
        MRET               = BitPat("b00110000001000000000000001110011"),
        DRET               = BitPat("b01111011001000000000000001110011"),
        SFENCE_VMA         = BitPat("b0001001??????????000000001110011"),
        WFI                = BitPat("b00010000010100000000000001110011"),
        CSRRW              = BitPat("b?????????????????001?????1110011"),
        CSRRS              = BitPat("b?????????????????010?????1110011"),
        CSRRC              = BitPat("b?????????????????011?????1110011"),
        CSRRWI             = BitPat("b?????????????????101?????1110011"),
        CSRRSI             = BitPat("b?????????????????110?????1110011"),
        CSRRCI             = BitPat("b?????????????????111?????1110011"),
        CUSTOM0            = BitPat("b?????????????????000?????0001011"),
        CUSTOM0_RS1        = BitPat("b?????????????????010?????0001011"),
        CUSTOM0_RS1_RS2    = BitPat("b?????????????????011?????0001011"),
        CUSTOM0_RD         = BitPat("b?????????????????100?????0001011"),
        CUSTOM0_RD_RS1     = BitPat("b?????????????????110?????0001011"),
        CUSTOM0_RD_RS1_RS2 = BitPat("b?????????????????111?????0001011"),
        CUSTOM1            = BitPat("b?????????????????000?????0101011"),
        CUSTOM1_RS1        = BitPat("b?????????????????010?????0101011"),
        CUSTOM1_RS1_RS2    = BitPat("b?????????????????011?????0101011"),
        CUSTOM1_RD         = BitPat("b?????????????????100?????0101011"),
        CUSTOM1_RD_RS1     = BitPat("b?????????????????110?????0101011"),
        CUSTOM1_RD_RS1_RS2 = BitPat("b?????????????????111?????0101011"),
        CUSTOM2            = BitPat("b?????????????????000?????1011011"),
        CUSTOM2_RS1        = BitPat("b?????????????????010?????1011011"),
        CUSTOM2_RS1_RS2    = BitPat("b?????????????????011?????1011011"),
        CUSTOM2_RD         = BitPat("b?????????????????100?????1011011"),
        CUSTOM2_RD_RS1     = BitPat("b?????????????????110?????1011011"),
        CUSTOM2_RD_RS1_RS2 = BitPat("b?????????????????111?????1011011"),
        CUSTOM3            = BitPat("b?????????????????000?????1111011"),
        CUSTOM3_RS1        = BitPat("b?????????????????010?????1111011"),
        CUSTOM3_RS1_RS2    = BitPat("b?????????????????011?????1111011"),
        CUSTOM3_RD         = BitPat("b?????????????????100?????1111011"),
        CUSTOM3_RD_RS1     = BitPat("b?????????????????110?????1111011"),
        CUSTOM3_RD_RS1_RS2 = BitPat("b?????????????????111?????1111011"),
        SLLI_RV32          = BitPat("b0000000??????????001?????0010011"),
        SRLI_RV32          = BitPat("b0000000??????????101?????0010011"),
        SRAI_RV32          = BitPat("b0100000??????????101?????0010011"),
        RDCYCLE            = BitPat("b11000000000000000010?????1110011"),
        RDTIME             = BitPat("b11000000000100000010?????1110011"),
        RDINSTRET          = BitPat("b11000000001000000010?????1110011"),
        RDCYCLEH           = BitPat("b11001000000000000010?????1110011"),
        RDTIMEH            = BitPat("b11001000000100000010?????1110011"),
        RDINSTRETH         = BitPat("b11001000001000000010?????1110011"),
    ),
    Causes = Bundle(
        misaligned_fetch = 0x0,
        fetch_access = 0x1,
        illegal_instruction = 0x2,
        breakpoint = 0x3,
        misaligned_load = 0x4,
        load_access = 0x5,
        misaligned_store = 0x6,
        store_access = 0x7,
        user_ecall = 0x8,
        machine_ecall = 0xb,
    ),
    CSRs = Bundle(
        cycle = 0xc00,
        instret = 0xc02,
        hpmcounter3 = 0xc03,
        hpmcounter4 = 0xc04,
        hpmcounter5 = 0xc05,
        hpmcounter6 = 0xc06,
        hpmcounter7 = 0xc07,
        hpmcounter8 = 0xc08,
        hpmcounter9 = 0xc09,
        hpmcounter10 = 0xc0a,
        hpmcounter11 = 0xc0b,
        hpmcounter12 = 0xc0c,
        hpmcounter13 = 0xc0d,
        hpmcounter14 = 0xc0e,
        hpmcounter15 = 0xc0f,
        hpmcounter16 = 0xc10,
        hpmcounter17 = 0xc11,
        hpmcounter18 = 0xc12,
        hpmcounter19 = 0xc13,
        hpmcounter20 = 0xc14,
        hpmcounter21 = 0xc15,
        hpmcounter22 = 0xc16,
        hpmcounter23 = 0xc17,
        hpmcounter24 = 0xc18,
        hpmcounter25 = 0xc19,
        hpmcounter26 = 0xc1a,
        hpmcounter27 = 0xc1b,
        hpmcounter28 = 0xc1c,
        hpmcounter29 = 0xc1d,
        hpmcounter30 = 0xc1e,
        hpmcounter31 = 0xc1f,
        mstatus = 0x300,
        misa = 0x301,
        medeleg = 0x302,
        mideleg = 0x303,
        mie = 0x304,
        mtvec = 0x305,
        mscratch = 0x340,
        mcounteren = 0x306,
        mepc = 0x341,
        mcause = 0x342,
        mt = 0x343,
        mip = 0x344,
        tselect = 0x7a0,
        tdata1 = 0x7a1,
        tdata2 = 0x7a2,
        tdata3 = 0x7a3,
        dcsr = 0x7b0,
        dpc = 0x7b1,
        dscratch = 0x7b2,
        mcycle = 0xb00,
        minstret = 0xb02,
        mhpmcounter3 = 0xb03,
        mhpmcounter4 = 0xb04,
        mhpmcounter5 = 0xb05,
        mhpmcounter6 = 0xb06,
        mhpmcounter7 = 0xb07,
        mhpmcounter8 = 0xb08,
        mhpmcounter9 = 0xb09,
        mhpmcounter10 = 0xb0a,
        mhpmcounter11 = 0xb0b,
        mhpmcounter12 = 0xb0c,
        mhpmcounter13 = 0xb0d,
        mhpmcounter14 = 0xb0e,
        mhpmcounter15 = 0xb0f,
        mhpmcounter16 = 0xb10,
        mhpmcounter17 = 0xb11,
        mhpmcounter18 = 0xb12,
        mhpmcounter19 = 0xb13,
        mhpmcounter20 = 0xb14,
        mhpmcounter21 = 0xb15,
        mhpmcounter22 = 0xb16,
        mhpmcounter23 = 0xb17,
        mhpmcounter24 = 0xb18,
        mhpmcounter25 = 0xb19,
        mhpmcounter26 = 0xb1a,
        mhpmcounter27 = 0xb1b,
        mhpmcounter28 = 0xb1c,
        mhpmcounter29 = 0xb1d,
        mhpmcounter30 = 0xb1e,
        mhpmcounter31 = 0xb1f,
        mucounteren = 0x320,
        mhpmevent3 = 0x323,
        mhpmevent4 = 0x324,
        mhpmevent5 = 0x325,
        mhpmevent6 = 0x326,
        mhpmevent7 = 0x327,
        mhpmevent8 = 0x328,
        mhpmevent9 = 0x329,
        mhpmevent10 = 0x32a,
        mhpmevent11 = 0x32b,
        mhpmevent12 = 0x32c,
        mhpmevent13 = 0x32d,
        mhpmevent14 = 0x32e,
        mhpmevent15 = 0x32f,
        mhpmevent16 = 0x330,
        mhpmevent17 = 0x331,
        mhpmevent18 = 0x332,
        mhpmevent19 = 0x333,
        mhpmevent20 = 0x334,
        mhpmevent21 = 0x335,
        mhpmevent22 = 0x336,
        mhpmevent23 = 0x337,
        mhpmevent24 = 0x338,
        mhpmevent25 = 0x339,
        mhpmevent26 = 0x33a,
        mhpmevent27 = 0x33b,
        mhpmevent28 = 0x33c,
        mhpmevent29 = 0x33d,
        mhpmevent30 = 0x33e,
        mhpmevent31 = 0x33f,
        mvendorid = 0xf11,
        marchid = 0xf12,
        mimpid = 0xf13,
        mhartid = 0xf14,
        cycleh = 0xc80,
        instreth = 0xc82,
        hpmcounter3h = 0xc83,
        hpmcounter4h = 0xc84,
        hpmcounter5h = 0xc85,
        hpmcounter6h = 0xc86,
        hpmcounter7h = 0xc87,
        hpmcounter8h = 0xc88,
        hpmcounter9h = 0xc89,
        hpmcounter10h = 0xc8a,
        hpmcounter11h = 0xc8b,
        hpmcounter12h = 0xc8c,
        hpmcounter13h = 0xc8d,
        hpmcounter14h = 0xc8e,
        hpmcounter15h = 0xc8f,
        hpmcounter16h = 0xc90,
        hpmcounter17h = 0xc91,
        hpmcounter18h = 0xc92,
        hpmcounter19h = 0xc93,
        hpmcounter20h = 0xc94,
        hpmcounter21h = 0xc95,
        hpmcounter22h = 0xc96,
        hpmcounter23h = 0xc97,
        hpmcounter24h = 0xc98,
        hpmcounter25h = 0xc99,
        hpmcounter26h = 0xc9a,
        hpmcounter27h = 0xc9b,
        hpmcounter28h = 0xc9c,
        hpmcounter29h = 0xc9d,
        hpmcounter30h = 0xc9e,
        hpmcounter31h = 0xc9f,
        mcycleh = 0xb80,
        minstreth = 0xb82,
        mhpmcounter3h = 0xb83,
        mhpmcounter4h = 0xb84,
        mhpmcounter5h = 0xb85,
        mhpmcounter6h = 0xb86,
        mhpmcounter7h = 0xb87,
        mhpmcounter8h = 0xb88,
        mhpmcounter9h = 0xb89,
        mhpmcounter10h = 0xb8a,
        mhpmcounter11h = 0xb8b,
        mhpmcounter12h = 0xb8c,
        mhpmcounter13h = 0xb8d,
        mhpmcounter14h = 0xb8e,
        mhpmcounter15h = 0xb8f,
        mhpmcounter16h = 0xb90,
        mhpmcounter17h = 0xb91,
        mhpmcounter18h = 0xb92,
        mhpmcounter19h = 0xb93,
        mhpmcounter20h = 0xb94,
        mhpmcounter21h = 0xb95,
        mhpmcounter22h = 0xb96,
        mhpmcounter23h = 0xb97,
        mhpmcounter24h = 0xb98,
        mhpmcounter25h = 0xb99,
        mhpmcounter26h = 0xb9a,
        mhpmcounter27h = 0xb9b,
        mhpmcounter28h = 0xb9c,
        mhpmcounter29h = 0xb9d,
        mhpmcounter30h = 0xb9e,
        mhpmcounter31h = 0xb9f,
    ),
) 
